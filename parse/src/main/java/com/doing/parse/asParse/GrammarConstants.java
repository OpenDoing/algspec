/* Generated By:JJTree&JavaCC: Do not edit this line. GrammarConstants.java */
package com.doing.parse.asParse;


/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface GrammarConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int POSITIVEINT_TKN = 7;
  /** RegularExpression Id. */
  int REAL_TKN = 8;
  /** RegularExpression Id. */
  int SPEC_TKN = 9;
  /** RegularExpression Id. */
  int SIG_TKN = 10;
  /** RegularExpression Id. */
  int DEF_TKN = 11;
  /** RegularExpression Id. */
  int AXIOM_TKN = 12;
  /** RegularExpression Id. */
  int OBSERVABLE_TKN = 13;
  /** RegularExpression Id. */
  int UNOBSERVABLE_TKN = 14;
  /** RegularExpression Id. */
  int EXTENDS_TKN = 15;
  /** RegularExpression Id. */
  int USES_TKN = 16;
  /** RegularExpression Id. */
  int CONST_TKN = 17;
  /** RegularExpression Id. */
  int VAR_TKN = 18;
  /** RegularExpression Id. */
  int OPERATORS_TKN = 19;
  /** RegularExpression Id. */
  int END_TKN = 20;
  /** RegularExpression Id. */
  int VOID_TKN = 21;
  /** RegularExpression Id. */
  int FORALL_TKN = 22;
  /** RegularExpression Id. */
  int THAT_TKN = 23;
  /** RegularExpression Id. */
  int IF_TKN = 24;
  /** RegularExpression Id. */
  int LET_TKN = 25;
  /** RegularExpression Id. */
  int IN_TKN = 26;
  /** RegularExpression Id. */
  int LEFTBRACE_TKN = 27;
  /** RegularExpression Id. */
  int RIGHTBRACE_TKN = 28;
  /** RegularExpression Id. */
  int SEMICOLON_TKN = 29;
  /** RegularExpression Id. */
  int COMMA_TKN = 30;
  /** RegularExpression Id. */
  int SELECTOR_TKN = 31;
  /** RegularExpression Id. */
  int LEFTBRACKET_TKN = 32;
  /** RegularExpression Id. */
  int RIGHTBRACKET_TKN = 33;
  /** RegularExpression Id. */
  int BETWEEN_TKN = 34;
  /** RegularExpression Id. */
  int LEFTPAREN_TKN = 35;
  /** RegularExpression Id. */
  int RIGHTPAREN_TKN = 36;
  /** RegularExpression Id. */
  int NULL_TKN = 37;
  /** RegularExpression Id. */
  int TRUE_TKN = 38;
  /** RegularExpression Id. */
  int FALSE_TKN = 39;
  /** RegularExpression Id. */
  int BOOLEAN_TKN = 40;
  /** RegularExpression Id. */
  int INTEGER_TKN = 41;
  /** RegularExpression Id. */
  int LONG_TKN = 42;
  /** RegularExpression Id. */
  int STRING_TKN = 43;
  /** RegularExpression Id. */
  int DATETIME_TKN = 44;
  /** RegularExpression Id. */
  int DOUBLE_TKN = 45;
  /** RegularExpression Id. */
  int FLOAT_TKN = 46;
  /** RegularExpression Id. */
  int OR_TKN = 47;
  /** RegularExpression Id. */
  int AND_TKN = 48;
  /** RegularExpression Id. */
  int NOT_TKN = 49;
  /** RegularExpression Id. */
  int ASSIGN_TKN = 50;
  /** RegularExpression Id. */
  int EQUAL_TKN = 51;
  /** RegularExpression Id. */
  int NOTEQUAL_TKN = 52;
  /** RegularExpression Id. */
  int MORETHAN_TKN = 53;
  /** RegularExpression Id. */
  int LESSTHAN_TKN = 54;
  /** RegularExpression Id. */
  int MORETHANEQU_TKN = 55;
  /** RegularExpression Id. */
  int LESSTHANEQU_TKN = 56;
  /** RegularExpression Id. */
  int OBJECTEQUAL_TKN = 57;
  /** RegularExpression Id. */
  int DOT_TKN = 58;
  /** RegularExpression Id. */
  int SHARP_TKN = 59;
  /** RegularExpression Id. */
  int ADD_TKN = 60;
  /** RegularExpression Id. */
  int MINUS_TKN = 61;
  /** RegularExpression Id. */
  int TIMES_TKN = 62;
  /** RegularExpression Id. */
  int DIVIDE_TKN = 63;
  /** RegularExpression Id. */
  int IDENTIFIER = 64;
  /** RegularExpression Id. */
  int LETTER = 65;
  /** RegularExpression Id. */
  int DIGIT = 66;
  /** RegularExpression Id. */
  int CSTRING_TKN = 67;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "<POSITIVEINT_TKN>",
    "<REAL_TKN>",
    "<SPEC_TKN>",
    "<SIG_TKN>",
    "<DEF_TKN>",
    "<AXIOM_TKN>",
    "<OBSERVABLE_TKN>",
    "<UNOBSERVABLE_TKN>",
    "\"extends\"",
    "\"uses\"",
    "<CONST_TKN>",
    "<VAR_TKN>",
    "<OPERATORS_TKN>",
    "<END_TKN>",
    "<VOID_TKN>",
    "<FORALL_TKN>",
    "<THAT_TKN>",
    "<IF_TKN>",
    "<LET_TKN>",
    "<IN_TKN>",
    "\"{\"",
    "\"}\"",
    "\";\"",
    "\",\"",
    "\":\"",
    "\"[\"",
    "\"]\"",
    "\"..\"",
    "\"(\"",
    "\")\"",
    "<NULL_TKN>",
    "<TRUE_TKN>",
    "<FALSE_TKN>",
    "<BOOLEAN_TKN>",
    "<INTEGER_TKN>",
    "<LONG_TKN>",
    "<STRING_TKN>",
    "<DATETIME_TKN>",
    "<DOUBLE_TKN>",
    "<FLOAT_TKN>",
    "\"or\"",
    "\"and\"",
    "<NOT_TKN>",
    "\"=\"",
    "\"==\"",
    "\"<>\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"is\"",
    "\".\"",
    "\"#\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "<CSTRING_TKN>",
  };

}
